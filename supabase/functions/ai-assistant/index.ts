import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, userId, context } = await req.json();
    
    if (!message) {
      throw new Error('Mesaj gerekli');
    }

    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openAIApiKey) {
      throw new Error('OpenAI API anahtarÄ± yapÄ±landÄ±rÄ±lmamÄ±ÅŸ');
    }

    // KullanÄ±cÄ± verilerini al (kiÅŸiselleÅŸtirme iÃ§in)
    let userContext = '';
    if (userId) {
      try {
        const supabase = createClient(
          Deno.env.get('SUPABASE_URL') ?? '',
          Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
        );

        const { data: profile } = await supabase
          .from('profiles')
          .select('full_name, language')
          .eq('user_id', userId)
          .single();

        const { data: activities } = await supabase
          .from('user_activities')
          .select('activity_type, created_at, score')
          .eq('user_id', userId)
          .order('created_at', { ascending: false })
          .limit(10);

        if (profile) {
          userContext = `KullanÄ±cÄ± bilgileri: Ad: ${profile.full_name || 'Bilinmiyor'}, Dil: ${profile.language || 'tr'}`;
        }

        if (activities && activities.length > 0) {
          const recentActivities = activities.map(a => 
            `${a.activity_type} (${new Date(a.created_at).toLocaleDateString('tr-TR')})`
          ).join(', ');
          userContext += `\nSon aktiviteler: ${recentActivities}`;
        }
      } catch (error) {
        console.log('KullanÄ±cÄ± baÄŸlamÄ± alÄ±namadÄ±:', error);
      }
    }

    // Sistem promptu - TÃ¼rkÃ§e saÄŸlÄ±k asistanÄ±
    const systemPrompt = `Sen ErgoAsistan'Ä±n AI saÄŸlÄ±k asistanÄ±sÄ±n. Uzaktan Ã§alÄ±ÅŸanlar iÃ§in ergonomi, duruÅŸ, gÃ¶z saÄŸlÄ±ÄŸÄ± ve genel saÄŸlÄ±klÄ± Ã§alÄ±ÅŸma alÄ±ÅŸkanlÄ±klarÄ± konusunda yardÄ±mcÄ± oluyorsun.

Ã–zelliklerin:
- TÃ¼rkÃ§e konuÅŸ ve samimi ol
- KÄ±sa ve pratik Ã¶neriler ver
- Pozitif ve motive edici ol
- SaÄŸlÄ±k konularÄ±nda profesyonel tavsiyelerde bulun
- Ergonomi, duruÅŸ kontrolÃ¼, gÃ¶z egzersizleri ve mola alÄ±ÅŸkanlÄ±klarÄ± hakkÄ±nda bilgi ver
- ZararlÄ± olabilecek tavsiyeler verme, ciddi saÄŸlÄ±k sorunlarÄ± iÃ§in doktora yÃ¶nlendir

${userContext ? `\n${userContext}` : ''}

KullanÄ±cÄ±nÄ±n sorusuna yardÄ±mcÄ± ol:`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: message }
        ],
        max_tokens: 500,
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('OpenAI API hatasÄ±:', errorData);
      throw new Error(`OpenAI API hatasÄ±: ${response.status}`);
    }

    const data = await response.json();
    const aiResponse = data.choices[0].message.content;

    console.log('AI yanÄ±t oluÅŸturuldu:', { userId, message: message.substring(0, 50) });

    return new Response(JSON.stringify({ 
      response: aiResponse,
      timestamp: new Date().toISOString()
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('AI asistan hatasÄ±:', error);
    
    // Hata durumunda varsayÄ±lan yanÄ±t
    const fallbackResponse = "ÃœzgÃ¼nÃ¼m, ÅŸu anda yanÄ±t veremiyorum. LÃ¼tfen daha sonra tekrar deneyin. Bu arada, 20-20-20 kuralÄ±nÄ± hatÄ±rlamayÄ± unutmayÄ±n: Her 20 dakikada bir, 20 saniye boyunca 6 metre uzaktaki bir noktaya bakÄ±n! ğŸ‘€";
    
    return new Response(JSON.stringify({ 
      response: fallbackResponse,
      error: true
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200, // KullanÄ±cÄ±ya hata gÃ¶stermemek iÃ§in 200 dÃ¶ndÃ¼r
    });
  }
});